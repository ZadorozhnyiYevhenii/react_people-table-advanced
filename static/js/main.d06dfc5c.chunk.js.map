{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","types/Gender.ts","components/PeopleFilters.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","types/Order.ts","types/SortType.ts","api.ts","components/Loader/Loader.tsx","components/Pages/PeoplePage.tsx","utils/getFilteredPeople.tsx","components/Navbar.tsx","components/Pages/HomePage.tsx","components/Pages/NotFind.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","Gender","centuriesForFilter","PeopleFilters","sex","query","centuries","handleQuery","handleSex","className","classNames","all","onClick","male","female","type","placeholder","onChange","map","century","includes","filter","item","length","PersonLink","person","userSlug","useParams","name","slug","born","died","motherName","fatherName","mother","pathname","father","PeopleTable","people","Order","SortType","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","Loader","PeoplePage","useState","setPeople","isLoading","setIsLoading","error","setError","setSearchParams","get","sort","order","getAll","visiblePeople","useMemo","filteredPeople","trim","normalizedQuery","toLowerCase","Math","ceil","p1","p2","Name","Sex","localeCompare","Born","Died","Desc","reverse","getFilteredPeople","fetchPeople","peopleFormServer","childrenWithParents","find","useEffect","event","target","current","linkClassName","isActive","Navbar","role","HomePage","NothingFound","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"8SAQO,SAASA,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcI,YA+BhB,OAjBAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFP,EAAUQ,OAAOF,GACRG,MAAMC,QAAQH,IAEvBP,EAAUQ,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZX,EAAUY,OAAON,EAAKK,EACvB,KAEDX,EAAUa,IAAIP,EAAKC,EAEtB,IAGIP,EAAUE,UAClB,C,mCCvCYY,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBACEC,GAAI,CACFC,OAAQxB,EAAcsB,EAAcH,KAElCC,GAJN,aAMGF,IAGN,ECxBWO,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,WAAYA,EAAZ,SAAYA,EAAZ,UAAYA,CAAZ,MCaMC,EAAqB,CAAC,KAAM,KAAM,KAAM,KAAM,MAEvCC,EAAiC,SAAC,GAMxC,IALLC,EAKI,EALJA,IACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,YACAC,EACI,EADJA,UAEA,OACE,sBAAKC,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,oBAAGA,UAAU,aAAa,UAAQ,YAAlC,UACE,cAAC,EAAD,CACEA,UAAWC,IAAW,CACpB,YAAaN,IAAQH,EAAOU,MAE9BhB,OAAQ,CAAES,IAAK,MACfQ,QAAS,kBAAMJ,EAAUP,EAAOU,IAAvB,EALX,iBASA,cAAC,EAAD,CACEF,UAAWC,IAAW,CACpB,YAAaN,IAAQH,EAAOY,OAE9BlB,OAAQ,CAAES,IAAKH,EAAOY,MACtBD,QAAS,kBAAMX,EAAOY,IAAb,EALX,kBASA,cAAC,EAAD,CACEJ,UAAWC,IAAW,CACpB,YAAaN,IAAQH,EAAOa,SAE9BnB,OAAQ,CAAES,IAAKH,EAAOa,QACtBF,QAAS,kBAAMX,EAAOa,MAAb,EALX,uBAWF,qBAAKL,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACRM,KAAK,SACLN,UAAU,QACVO,YAAY,SACZC,SAAUV,EACVrB,MAAOmB,IAGT,sBAAMI,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SACGP,EAAmBgB,KAAI,SAAAC,GAAO,OAC7B,cAAC,EAAD,CAEE,UAAQ,UACRV,UAAWC,IAAW,cAAe,CACnC,UAAWJ,EAAUc,SAASD,KAEhCxB,OAAQ,CACNW,UAAWA,EAAUc,SAASD,GAC1Bb,EAAUe,QAAO,SAAAC,GAAI,OAAIA,IAASH,CAAb,IADd,sBAEHb,GAFG,CAEQa,KATvB,SAYGA,GAXIA,EAFsB,MAmBjC,qBAAKV,UAAU,mBAAf,SACE,cAAC,EAAD,CACE,UAAQ,aACRA,UAAWC,IAAW,oBAAqB,CACzC,cAAeJ,EAAUiB,OAAS,IAEpC5B,OAAQ,CAAEW,UAAW,MALvB,wBAaN,qBAAKG,UAAU,cAAf,SACE,cAAC,EAAD,CACEA,UAAU,0CACVd,OAAQ,CACNW,UAAW,KACXD,MAAO,KACPD,IAAK,MALT,mCAaP,ECjHYoB,EAA8B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpCC,EAAaC,cAAbD,SAENE,EAOEH,EAPFG,KACAC,EAMEJ,EANFI,KACAzB,EAKEqB,EALFrB,IACA0B,EAIEL,EAJFK,KACAC,EAGEN,EAHFM,KACAC,EAEEP,EAFFO,WACAC,EACER,EADFQ,WAGF,EAAuBpC,cAAhBC,EAAP,oBAEA,OACE,qBACE,UAAQ,SACRW,UAAWC,IAAW,CACpB,yBAA0BmB,IAASH,IAHvC,UAME,6BACE,cAAC,IAAD,CACE3B,GAAE,kBAAa8B,GACfpB,UAAWC,IAAW,CAAE,kBAAmBN,IAAQH,EAAOa,SAF5D,SAIGc,MAIL,6BAAKxB,IACL,6BAAK0B,IACL,6BAAKC,IACL,6BACGN,EAAOS,OACN,cAAC,IAAD,CACEnC,GACE,CAAEoC,SAAS,WAAD,OAAaV,EAAOS,OAAOL,MAAQ7B,OAAQF,EAAajB,YAEpE4B,UAAU,kBAJZ,SAMGuB,IAEAA,GAAc,MAGrB,6BACGP,EAAOW,OACN,cAAC,IAAD,CACErC,GACE,CAAEoC,SAAS,WAAD,OAAaV,EAAOW,OAAOP,MAAQ7B,OAAQF,EAAajB,YAFtE,SAKGoD,IAEAA,GAAc,QAI1B,EC7DYI,EAA+B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAC1C,wBACE,UAAQ,cACR7B,UAAU,uDAFZ,UAIE,gCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,6CAGJ,gCACG6B,EAAOpB,KAAI,SAAAO,GAAM,OAChB,cAAC,EAAD,CAEEA,OAAQA,GADHA,EAAOI,KAFE,QAhBoB,ECRhCU,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,UAAYA,EAAZ,YAAYA,CAAZ,MCAYC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,YAAYA,EAAZ,UAAYA,EAAZ,YAAYA,EAAZ,YAAYA,CAAZ,MCGMC,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,CAEM,SAAeI,IAAtB,+B,sDAAO,iHAEEL,EAAK,KACTM,MAAK,kBAAMC,MAAMR,EAAZ,IACLO,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,gCCPMC,EAAS,kBACpB,qBAAK3C,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,ECWT4C,EAAa,WACxB,MAA4BC,mBAAmB,IAA/C,mBAAOhB,EAAP,KAAeiB,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,oBAAS,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAAwC9D,cAAxC,mBAAOC,EAAP,KAAqB8D,EAArB,KAEMvD,EAAQP,EAAa+D,IAAI,UAAY,GACrCzD,EAAMN,EAAa+D,IAAI,OACvBC,EAAOhE,EAAa+D,IAAI,QACxBE,EAAQjE,EAAa+D,IAAI,SACzBvD,EAAYR,EAAakE,OAAO,cAAgB,GAEhDC,EAAgBC,mBAAQ,WAC5B,OCrB6B,SAAC5B,EAAD,GAMF,IAL7BjC,EAK4B,EAL5BA,MACAC,EAI4B,EAJ5BA,UACAF,EAG4B,EAH5BA,IACA0D,EAE4B,EAF5BA,KACAC,EAC4B,EAD5BA,MAEII,EAAc,YAAO7B,GAEzB,GAAqB,KAAjBjC,EAAM+D,OAAe,CACvB,IAAMC,EAAkBhE,EAAMiE,cAAcF,OAE5CD,EAAiBA,EAAe9C,QAC9B,SAAAI,GAAM,eAAIA,EAAOG,KAAK0C,cAAclD,SAASiD,KAAnC,UACL5C,EAAOQ,kBADF,aACL,EAAmBqC,cAAclD,SAASiD,MADrC,UAEL5C,EAAOO,kBAFF,aAEL,EAAmBsC,cAAclD,SAASiD,GAFzC,GAIT,CAiCD,OA/BI/D,EAAUiB,OAAS,IACrB4C,EAAiBA,EAAe9C,QAAO,SAACI,GACtC,OAAOnB,EAAUc,SAASmD,KAAKC,KAAK/C,EAAOK,KAAO,KAAKjD,WACxD,KAGCuB,IACF+D,EAAiBA,EAAe9C,QAAO,SAAAI,GAAM,OAAIA,EAAOrB,MAAQA,CAAnB,KAG3C0D,GACFK,EAAeL,MAAK,SAACW,EAAYC,GAC/B,OAAQZ,GACN,KAAKtB,EAASmC,KACd,KAAKnC,EAASoC,IACZ,OAAOH,EAAGX,GAAMe,cAAcH,EAAGZ,IAEnC,KAAKtB,EAASsC,KACd,KAAKtC,EAASuC,KACZ,OAAON,EAAGX,GAAQY,EAAGZ,GAEvB,QACE,OAAO,EAEZ,IAGCC,IAAUxB,EAAMyC,MAClBb,EAAec,UAGVd,CACR,CD9BUe,CAAkB5C,EAAQ,CAC/BjC,QACAD,MACA0D,OACAC,QACAzD,aAEH,GAAE,CAACgC,EAAQxC,IAENqF,EAAW,iDAAG,uGAClB1B,GAAa,GACbE,GAAS,GAFS,kBAKeZ,IALf,OAKVqC,EALU,OAMVC,EAAsBD,EAAiBlE,KAAI,SAAAO,GAAM,kCAClDA,GADkD,IAErDW,OAAQgD,EACLE,MAAK,SAAAlD,GAAM,OAAIA,EAAOR,OAASH,EAAOQ,UAA3B,IACdC,OAAQkD,EACLE,MAAK,SAAApD,GAAM,OAAIA,EAAON,OAASH,EAAOO,UAA3B,KALuC,IAQvDuB,EAAU8B,GAdM,kDAgBhB1B,GAAS,GAhBO,yBAkBhBF,GAAa,GAlBG,6EAAH,qDAoCjB,OAJA8B,qBAAU,WACRJ,GACD,GAAE,IAGD,qCACE,oBAAI1E,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,UACE,qBAAKA,UAAU,uCAAf,SACE,cAAC,EAAD,CACEJ,MAAOA,EACPC,UAAWA,EACXF,IAAKA,EACLG,YAzBQ,SAACiF,GACnB5B,EACEpF,EAAcsB,EAAc,CAAEO,MAAOmF,EAAMC,OAAOvG,QAErD,EAsBWsB,UApBM,SAACkF,GACjB9B,EAAgBpF,EAAcsB,EAAc,CAAE4F,YAC/C,MAsBO,qBAAKjF,UAAU,SAAf,SACE,qBAAKA,UAAU,sBAAf,SACG+C,EACG,cAAC,EAAD,IAEA,qCACGE,GACC,mBACE,UAAQ,qBACRjD,UAAU,kBAFZ,kCAQiB,IAAlB6B,EAAOf,SAAiBmC,GACvB,mBAAG,UAAQ,kBAAX,+CAKDO,EAAc1C,OAAS,IAAMmC,EAC5B,cAAC,EAAD,CAAapB,OAAQ2B,IAErB,uGAYrB,EExHK0B,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAyClF,IAC7D,cACA,CAAE,8BAA+BkF,GAFb,EAKTC,EAAS,WACpB,OACE,qBACE,UAAQ,MACRpF,UAAU,iCACVqF,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKrF,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEA,UAAWkF,EACX5F,GAAG,IAFL,kBAOA,cAAC,IAAD,CACE,eAAa,OACbU,UAAWkF,EACX5F,GAAG,UAHL,0BAWT,EClCYgG,G,MAAqB,WAChC,OACE,oBAAItF,UAAU,QAAd,sBAEH,GCNYuF,EAAe,kBAC1B,oBAAIvF,UAAU,QAAd,2BAD0B,ECQfwF,EAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,qBAAKxF,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyF,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAUpG,GAAG,IAAIqG,SAAO,MACrD,cAAC,IAAD,CAAOF,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,eAAC,IAAD,CAAOD,KAAK,SAAZ,UACE,cAAC,IAAD,CAAOG,OAAK,EAACF,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,YAAYC,QAAS,cAAC,EAAD,SAEnC,cAAC,IAAD,CACED,KAAK,IACLC,QAAS,cAAC,EAAD,eAOtB,ECvBDG,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.d06dfc5c.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\nexport const SearchLink: React.FC<Props> = ({\n  children,\n  params,\n  ...props\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum Gender {\n  female = 'f',\n  male = 'm',\n  all = 'all',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { Gender } from '../types/Gender';\n\ntype Props = {\n  sex: string,\n  query: string,\n  centuries: string[],\n  handleQuery: (query: React.ChangeEvent<HTMLInputElement>) => void,\n  handleSex: (sex: Gender) => void,\n};\n\nconst centuriesForFilter = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters: React.FC<Props> = ({\n  sex,\n  query,\n  centuries,\n  handleQuery,\n  handleSex,\n}) => {\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({\n            'is-active': sex === Gender.all,\n          })}\n          params={{ sex: null }}\n          onClick={() => handleSex(Gender.all)}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === Gender.male,\n          })}\n          params={{ sex: Gender.male }}\n          onClick={() => Gender.male}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === Gender.female,\n          })}\n          params={{ sex: Gender.female }}\n          onClick={() => Gender.female}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleQuery}\n            value={query}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesForFilter.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter(item => item !== century)\n                    : [...centuries, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': centuries.length > 0,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: null,\n            query: null,\n            sex: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport { useParams, Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { Gender } from '../types/Gender';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { userSlug } = useParams();\n  const {\n    name,\n    slug,\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n  } = person;\n\n  const [searchParams] = useSearchParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': slug === userSlug,\n      })}\n    >\n      <td>\n        <Link\n          to={`/people/${slug}`}\n          className={classNames({ 'has-text-danger': sex === Gender.female })}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {person.mother ? (\n          <Link\n            to={\n              { pathname: `/people/${person.mother.slug}`, search: searchParams.toString() }\n            }\n            className=\"has-text-danger\"\n          >\n            {motherName}\n          </Link>\n        ) : (motherName || '-')}\n      </td>\n\n      <td>\n        {person.father ? (\n          <Link\n            to={\n              { pathname: `/people/${person.father.slug}`, search: searchParams.toString() }\n            }\n          >\n            {fatherName}\n          </Link>\n        ) : (fatherName || '-')}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { PersonLink } from './PersonLink';\nimport { Person } from '../types';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => (\n  <table\n    data-cy=\"peopleTable\"\n    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n  >\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Sex</th>\n        <th>Born</th>\n        <th>Died</th>\n        <th>Mother</th>\n        <th>Father</th>\n      </tr>\n    </thead>\n    <tbody>\n      {people.map(person => (\n        <PersonLink\n          key={person.slug}\n          person={person}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","export enum Order {\n  Asc = 'asc',\n  Desc = 'desc',\n}\n","export enum SortType {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from '../PeopleFilters';\nimport { PeopleTable } from '../PeopleTable';\nimport { Person } from '../../types';\nimport { Gender } from '../../types/Gender';\nimport { SortType } from '../../types/SortType';\nimport { Order } from '../../types/Order';\nimport { getFilteredPeople } from '../../utils/getFilteredPeople';\nimport { getPeople } from '../../api';\nimport { Loader } from '../Loader';\nimport { getSearchWith } from '../../utils/searchHelper';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') as Gender;\n  const sort = searchParams.get('sort') as SortType;\n  const order = searchParams.get('order') as Order;\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const visiblePeople = useMemo(() => {\n    return getFilteredPeople(people, {\n      query,\n      sex,\n      sort,\n      order,\n      centuries,\n    });\n  }, [people, searchParams]);\n\n  const fetchPeople = async () => {\n    setIsLoading(true);\n    setError(false);\n\n    try {\n      const peopleFormServer = await getPeople();\n      const childrenWithParents = peopleFormServer.map(person => ({\n        ...person,\n        father: peopleFormServer\n          .find(father => father.name === person.fatherName),\n        mother: peopleFormServer\n          .find(mother => mother.name === person.motherName),\n      }));\n\n      setPeople(childrenWithParents);\n    } catch {\n      setError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const hadnleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(\n      getSearchWith(searchParams, { query: event.target.value }),\n    );\n  };\n\n  const handleSex = (current: string) => {\n    setSearchParams(getSearchWith(searchParams, { current }));\n  };\n\n  useEffect(() => {\n    fetchPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters\n              query={query}\n              centuries={centuries}\n              sex={sex}\n              handleQuery={hadnleQuery}\n              handleSex={handleSex}\n            />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <>\n                    {error && (\n                      <p\n                        data-cy=\"peopleLoadingError\"\n                        className=\"has-text-danger\"\n                      >\n                        Something went wrong\n                      </p>\n                    )}\n\n                    {people.length === 0 && !error && (\n                      <p data-cy=\"noPeopleMessage\">\n                        There are no people on the server\n                      </p>\n                    )}\n\n                    {visiblePeople.length > 0 && !error ? (\n                      <PeopleTable people={visiblePeople} />\n                    ) : (\n                      <p>\n                        There are no people matching the current search criteria\n                      </p>\n                    )}\n                  </>\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\nimport { FilterParams } from '../types/FiltereParams';\nimport { Order } from '../types/Order';\nimport { SortType } from '../types/SortType';\n\nexport const getFilteredPeople = (people: Person[], {\n  query,\n  centuries,\n  sex,\n  sort,\n  order,\n}: FilterParams): Person[] => {\n  let filteredPeople = [...people];\n\n  if (query.trim() !== '') {\n    const normalizedQuery = query.toLowerCase().trim();\n\n    filteredPeople = filteredPeople.filter(\n      person => person.name.toLowerCase().includes(normalizedQuery)\n        || person.fatherName?.toLowerCase().includes(normalizedQuery)\n        || person.motherName?.toLowerCase().includes(normalizedQuery),\n    );\n  }\n\n  if (centuries.length > 0) {\n    filteredPeople = filteredPeople.filter((person) => {\n      return centuries.includes(Math.ceil(person.born / 100).toString());\n    });\n  }\n\n  if (sex) {\n    filteredPeople = filteredPeople.filter(person => person.sex === sex);\n  }\n\n  if (sort) {\n    filteredPeople.sort((p1: Person, p2: Person) => {\n      switch (sort) {\n        case SortType.Name:\n        case SortType.Sex:\n          return p1[sort].localeCompare(p2[sort]);\n\n        case SortType.Born:\n        case SortType.Died:\n          return p1[sort] - p2[sort];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order === Order.Desc) {\n    filteredPeople.reverse();\n  }\n\n  return filteredPeople;\n};\n","import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst linkClassName = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item',\n  { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={linkClassName}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={linkClassName}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\n\nexport const HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const NothingFound = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/Pages/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\nimport { HomePage } from './components/Pages/HomePage';\nimport { NothingFound } from './components/Pages/NotFind';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":userSlug\" element={<PeoplePage />} />\n            </Route>\n            <Route\n              path=\"*\"\n              element={<NothingFound />}\n            />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}